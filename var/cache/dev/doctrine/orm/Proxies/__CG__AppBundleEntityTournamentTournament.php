<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TournamentTournament extends \AppBundle\Entity\TournamentTournament implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'type', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'scoring', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'amountPlayers', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'amountPartners', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'amountCourts', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'status', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'metadata', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'localClubName', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'club', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'creator'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'type', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'scoring', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'amountPlayers', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'amountPartners', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'amountCourts', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'status', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'metadata', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'localClubName', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'club', '' . "\0" . 'AppBundle\\Entity\\TournamentTournament' . "\0" . 'creator'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TournamentTournament $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setScoring($scoring)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setScoring', [$scoring]);

        return parent::setScoring($scoring);
    }

    /**
     * {@inheritDoc}
     */
    public function getScoring()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScoring', []);

        return parent::getScoring();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmountPlayers($amountPlayers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmountPlayers', [$amountPlayers]);

        return parent::setAmountPlayers($amountPlayers);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmountPlayers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmountPlayers', []);

        return parent::getAmountPlayers();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmountPartners($amountPartners)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmountPartners', [$amountPartners]);

        return parent::setAmountPartners($amountPartners);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmountPartners()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmountPartners', []);

        return parent::getAmountPartners();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmountCourts($amountCourts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmountCourts', [$amountCourts]);

        return parent::setAmountCourts($amountCourts);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmountCourts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmountCourts', []);

        return parent::getAmountCourts();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated($updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setSharingCode($sharingCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSharingCode', [$sharingCode]);

        return parent::setSharingCode($sharingCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getSharingCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSharingCode', []);

        return parent::getSharingCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetadata($metadata)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetadata', [$metadata]);

        return parent::setMetadata($metadata);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetadata()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetadata', []);

        return parent::getMetadata();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocalClubName($localClubName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocalClubName', [$localClubName]);

        return parent::setLocalClubName($localClubName);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocalClubName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocalClubName', []);

        return parent::getLocalClubName();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setClub(\AppBundle\Entity\TournamentClub $club = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClub', [$club]);

        return parent::setClub($club);
    }

    /**
     * {@inheritDoc}
     */
    public function getClub()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClub', []);

        return parent::getClub();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreator(\AppBundle\Entity\UserProfilePlayerprofile $creator = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreator', [$creator]);

        return parent::setCreator($creator);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreator', []);

        return parent::getCreator();
    }

}
